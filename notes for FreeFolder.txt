Server for FreeFolder

file can have three states:
	passive
	downloading from client
	sending to client

server - client communication:
	client will check with server if a change has been made
	if the server has a later timestamp for that file than the client, download that file

	client checks it filelist with the servers:
		server has file that client doesnt
			download file from server
		server has recently registered deletion of file
			dialog: "delete file locally or just stop tracking?"
		client is tracking file that server doesnt have yet
			upload file to server


command types that can be sent client -> server
	check that files are downloaded and are up to date
	download (specified)
	upload files

Server doesnt hold a list of all files at runtime.
Server just holds some simple strings and stuffs to represent a file.
The files themselves aren't loaded to be sent to clients until needed.

	this can be saved some sort of proprietary file. maybe *.sft?

==========================
 Class structure proposal
==========================


ServerMonitor : Observable
	acceptIncomingConnections()
	disableIncomingConnections()
	getRecentCommands() : List<Command>
	send(Command)
	listenForMessages()
	stopListeningForMessages()


ServerFileManager : Observer
	# Map<String id, ServerFileTracker>

	compareFileTrackerList(List<FileTracker>) : List<FileTracker>
	update()
		//get commands from server
		//execute commands


FileTracker : Serializable
	# id
	# filepath : transient
	# timestamp
	# last author
	# historyFile : transient (this will be added later)

	File load()
	overwrite(File)
	compare()	// EQUAL, OLDER, NEWER, DIFFERENT_FILE


Command : Serializable

CompareFileList : Command
	# List<FileTracker>

	execute(ServerFileManager, ServerMonitor)
		//get list of FileTrackers
		//if user is missing files, inform client
		//if server is missing some of these files, send List<DownloadRequest> to client
		//if user has old version of file, send List<DownloadRequest> to client

DownloadRequest : Command
	# FileTracker
	# IP

	execute(ServerFileManager, ServerMonitor)
		//build SendFile
		//send SendFile to client

	execute(FileTrackerManager)
		//change status of local FileTracker
		//build SendFile
		//send SendFile to server


SendFile : Command 
	# FileTracker
	# IP

	execute(ServerFileManager, ServerMonitor)
		//load file with FileTracker.load()
		//send to client 

	execute(FileTrackerManager)
		//load file with FileTracker.load()
		//send to server


FileRecieved : Command
	# File
	# FileTracker (or just the id)

	execute(FileTrackerManager)
		//get the local FileTracker for the file
		//overwrite the file
		//change status of FileTracker