Server for FreeFolder

file can have three states:
	UP_TO_DATE
	downloading from client
	sending to client

server - client communication:
	client will check with server if a change has been made
	if the server has a later timestamp for that file than the client, download that file

	client checks it filelist with the servers:
		server has file that client doesnt
			download file from server
		server has recently registered deletion of file
			dialog: "delete file locally or just stop tracking?"
		client is tracking file that server doesnt have yet
			upload file to server


command types that can be sent client -> server
	check that files are downloaded and are up to date
	download (specified)
	upload files

Server doesnt hold a list of all files at runtime.
Server just holds some simple strings and stuffs to represent a file.
The files themselves aren't loaded to be sent to clients until needed.

	this can be saved some sort of proprietary file. maybe *.sft?

==========================
 Class structure proposal
==========================


ServerMonitor : Observable
	acceptIncomingConnections()
	disableIncomingConnections()
	getRecentCommands() : List<Command>
	send(Command)
	listenForMessages()
	stopListeningForMessages()


ServerFileManager : Observer
	# Map<String id, ServerFileTracker>

	compareFileTrackerList(List<FileTracker>) : List<FileTracker>
	update()
		//get commands from server
		//execute commands


FileTracker : Serializable
	# id
	# filepath : transient
	# timestamp
	# last author
	# status 	// UP_TO_DATE, UPDATING, PENDING_UPDATE, UPLOADING
	# historyFile : transient (this will be added later)

	getId() : String
	getStatus() : int
	setStatus(int)

	loadFile() : File
	overwrite(File)
	compare() : int		// EQUAL, OLDER, NEWER, DIFFERENT_FILE


Command : Serializable

CompareFileList : Command
	# Map<id, FileTracker>

	execute(ServerFileManager, ServerMonitor)
		//create List<DownloadRequest>
		//get list of FileTrackers
		//check every local FileTracker against the map
			//if user has old version of file, build and add to List<DownloadRequest>
			//if user is missing files, build and add to List<DownloadRequest>
			//if user has newer of file,
		 to client

FileStatusReport
	# Map<id, status>
	# IP

	built-by-server

	execute(FileTrackerManager)
		//set status of files
		//if status == NEEDS_UPDATE
			//set file status to PENDING_UPDATE
			//build and send DownloadRequest
		//if status == NOT_ON_SERVER
			//set file status to UPLOADING
			//build and send OverwriteFile



DownloadRequest : Command
	# id
	# IP

	execute(FileTrackerManager)
		//set FileTracker status to UPLOADING
		//build OverwriteFile
		//send OverwriteFile to server

OverwriteFile : Command
	# FileTracker
	# File
	# IP

	/** This is executed when a file has uploaded to the server */
	execute(ServerFileTrackerManager, ServerMonitor)
		//if local FileTracker exists
			//overwrite the file
		//else
			//add FileTracker
		//build FileRecievedAcknowledgment
		//send FileRecievedAcknowledgment to IP

	execute(FileTrackerManager)
		//get the local FileTracker with id
		//overwrite the file
		//change status of FileTracker to UP_TO_DATE


FileRecievedAcknowledgment : Command
	# id

	built-by-server

	execute(FileManager)
		//change status of FileTracker to UP_TO_DATE


===========================================================
===========================================================


> Diagram: local file on client that is up to date

---Client---				---Server---

> from autoupdateThread
CompareFileList -->		
							Execute:
						<--	FileStatusReport
Execute:
> file status: UP_TO_DATE

===========================================================

> Diagram: local file on client that needs update

---Client---				---Server---

> from autoupdateThread
CompareFileList -->		
							Execute:
						<--	FileStatusReport
Execute:
> file needs update
DownloadRequest -->
							Execute:
						<--	OverWriteFile
Execute:
> file is overwritten.
> file status: UP_TO_DATE

===========================================================

> Diagram: local file on client that needs to be uploaded

---Client---				---Server---

> from autoupdateThread
CompareFileList -->		
							Execute:
						<--	FileStatusReport
Execute:
> file is being uploaded.
OverWriteFile -->
							Execute:
						<--	FileRecievedAcknowledgment
Execute:
> file is uploaded.
> file status: UP_TO_DATE